I also suppose that some people have more patience and attention than others - and we call this "having talent" - it could help or make your learning faster - but 
it is important when you want to became No.1, I think...)

Don't be lazy in casework Implementation.




Study them. Forget the thing that I can't solve them. Continue to compete.
The idea is to not get discouraged and keep practicing 
, make a habit of thinking for problems.

I have only one piece of advise.
Practice makes perfect.
Upsolving is very important. In my opinion there is no point in 
taking part in contests without upsolving them later if you want to grow.

When you get out your comfort zone it becomes the learning zone, I am completely in agreement with you, I think that getting out of the comfort zone, upsolving , and 
trying always to solve harder problems is the key to success in programming competitions.
Use codechef, codeforces, hackeerrank, Project Euler
SPOJ (classical DSA practice)
1. Implementation problems
2. Maths
3. Greedy
4. Combinatorics
5. Dynamic programming 
6. Binary search
Make a task list and practice regularly

Next target : upsolve and solve first 300 problems of codeforces
Use downtime

When you see a problem you should be trying to simplify it 
as much as you can, and then the simplified problem is 
either very easy to solve or you can apply some well known 
technique. A second advantage of random solving is that you 
will meet techniques in the 
same proportion that they are relevant.

I think topic-based training is somewhat useful in learning new technique, especially data structures


Have you thought about possible psychological reasons? For example:

Expectations: you assume you should be able to solve div2-C problems faster than you were 10 months before, but you don't. It's possible that a lot of your brainpower is wasted thinking on stuff like that while solving problems.

Biases: you know the B-C gap exists, and you know your (low) success rate on these problems. So, it's possible that you are "treating" Div2-C problems with fear and with no so very inner hope.

Evaluation anxiety: lot of people just sucks at doing exams and things under pressure.


Dreamoon's blog
I guess the relation is thinking > coding >> reading editorials. my time of thinking is far more than reading editorials. For example, when I practice POI, I usually think a problem for more than three days. And I won't read editorial until I solve it. But when I'm a beginner(learn about 1~3 years), the relation is reading >> coding  thinking. I study a variety of reference from books, websites and friends.

No. I don't care it. However, I will be more happy if I can do more in a day.

If it's a real time contest problem. I will read immediate after contest is end. But I will not read entire editorial. I will stop when I get new information what I don't know and continue to think. If It's not problems of real time contests, I seldom read editorial except I fell it's a problem contain huge knowledge I don't know(totally depend on my sense).

I will almost write it when I still can take part in ICPC. But I think it's not necessary...