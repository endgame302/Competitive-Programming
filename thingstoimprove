I also suppose that some people have more patience and attention than others - and we call this "having talent" - it could help or make your learning faster - but 
it is important when you want to became No.1, I think...)

1. Implementation problems
2. Maths
3. Greedy
4. Combinatorics
5. Dynamic programming 
6. Binary search

Next target : upsolve and solve first 300 problems of codeforces
Use downtime

When you see a problem you should be trying to simplify it 
as much as you can, and then the simplified problem is 
either very easy to solve or you can apply some well known 
technique. A second advantage of random solving is that you 
will meet techniques in the 
same proportion that they are relevant.

I think topic-based training is somewhat useful in learning new technique, especially data structures


Have you thought about possible psychological reasons? For example:

Expectations: you assume you should be able to solve div2-C problems faster than you were 10 months before, but you don't. It's possible that a lot of your brainpower is wasted thinking on stuff like that while solving problems.

Biases: you know the B-C gap exists, and you know your (low) success rate on these problems. So, it's possible that you are "treating" Div2-C problems with fear and with no so very inner hope.

Evaluation anxiety: lot of people just sucks at doing exams and things under pressure.