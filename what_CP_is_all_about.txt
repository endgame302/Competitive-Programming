https://qr.ae/TjA0uu
Do top competitive programmers also learn the theory behind algorithms, or do they just do problems?
Competitive programming is built on top of two basic skills:

Knowledge of algorithms, data structures, etc.
Abstract thinking and problem-solving skills
So let’s go in detail how each of these skills helps in CP.

Knowledge
One fine day, Alice stumbled upon this amazing thing called competitive programming, when she overheard the cool kids in her class discussing it. She wanted to give it a shot. She hopped on the internet and looked for resources that can help her start her journey. She found a lot of articles on how to do it exactly. Her initial understanding of how to enter the world of competitive programming can be broken down into three nuggets of information:

She found out that first and foremost, she would need to know some standard algorithms and data structures. These will form the toolkit of a competitive programmer. Alice understood that competitive programming involves algorithms and data structures.
She found out that almost every article she read mentioned the names of some common algorithms and data structures, such as hash tables, bfs, dfs, dynamic programming, trees, sorting, searching, etc. Alice understood that competitive programming requires knowledge of some specific algorithms and data structures and that she is not expected to know all the algorithms and data structures in the world, just some specific ones.
She found out about something called online judges. An online judge is a collection of problems along with test cases, and users can try solving those problems by submitting codes. If the solution is correct, then all the test cases for that problem will pass, otherwise, the user’s solution is wrong to some extent. Alice understood that it’s a nice way to test your own understanding of what you learned.
Alice started learning the algorithms and data structures that she saw repetitively appear in get-started tutorials. She was confident after some time, that she completely understood them. So now she wanted to test her knowledge. She chose an online judge based on recommendations she saw on the internet. She looked through the problem set and attempted them one by one. Alice was shocked by what happened next! She was unable to solve a single problem on the online judge!

Alice didn’t understand what went wrong. She figured that maybe there are more algorithms and data structures to learn than the ones she knew. So, she read the editorials and solutions to the problems to find out which ones she needed to learn. To her horror, she realized that each of the problems she was unable to solve used some or the other algorithm or data structure she already thought she had mastered.

Problem-solving skills
Alice was not going to give up. She analyzed the situation, and made a very important observation regarding the algorithms and data structures (concepts) she had learned, which is that each concept had two aspects:

it’s internal working
it’s use cases
She realized that not only are there two aspects of every concept, but the more interesting thing was that they were decoupled from each other. She was only able to appreciate this subtlety about the concepts after having spent a lot of time making sure she understood the internal workings but failing miserably in applying them.

She was fascinated, and went straight to the problem set and attempted more problems. She kept getting better and better with practice. She realized that algorithms like dfs, binary search, etc. have nothing brilliant about them in itself, but the clever ways in which they can be used to solve tricky problems are fascinating.

Alice became good in those concepts with the passage of sufficient time and dedicated practice. She wondered, is this all? Or is there more to competitive programming? And if so, can she just skip the internal workings of those new concepts altogether, and jump straight to their application by treating the internal working as a black box, as she had previously concluded? She hopped on the internet again and started looking for advanced concepts and advanced material. And she found it.

She realized that a lot of the advanced concepts often used the basic concepts she learned as their building blocks. They were usually just clever applications of the basic concepts themselves, just like those tricky problems! But that’s not all. Some advanced concepts used ingenious optimizations and observations in their internal workings, and their use cases turned out to be relatively straightforward. Alice was shocked again at this turn of tables. She realized that concepts like smaller to larger, convex hull optimization, centroid decomposition, network flows, etc. had ingenious internal workings.

Alice truly enjoyed learning the internal workings of these advanced concepts, as well as solving problems that used them. The more problems she solved, the more she realized, that a lot of problems that did not directly use those advanced concepts still had the main crux of the solution coming from the ingenious observations and optimizations that those advanced concepts used.

Alice finally understood what competitive programming is all about! When her friends asked her how she got so good at competitive programming, she said “On the outside, it looks like you have to learn a lot of algorithms and data structures, and then practice a lot. But if you look closely, you will see that it’s all about the small observations and optimizations that make the bigger algorithms and data structures what they are. If you focus only on learning the concepts and think that you’ve mastered it, you will be woefully mistaken. And, if you treat the concepts as black boxes, you will miss the ingenuity behind those concepts. The goal of CP is not to learn more and more concepts. It’s to learn more and more ingenious nuggets of knowledge, which appear in the form of clever observations and optimizations, which can sometimes appear in the internal workings of other concepts, or they can simply be thought as concepts of their own.” Her friends scratched their heads and said, “One more time, please.” Alice smiled and said, “Just keep practicing on online judges. The more problems you do, the more chances that you discover these ingenious little concepts, and learn from them. But don’t skip the internal working of how the algorithms and data structures internally work!”. Her friends were satisfied, but they did not quite understand what Alice tried to say. They practiced a lot but still were unable to achieve the same results as Alice. They concluded that competitive programming was just not for them. But Alice knew why they were struggling. Her friends simply lacked the eye to spot the ingenuities she talked about, and that is all that matters in CP, regardless of where it comes from. All top competitive programmers know this and have that eye.
